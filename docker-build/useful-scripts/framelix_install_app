#!/usr/bin/bash

while getopts g:d:t:q: flag
do
    case "${flag}" in
        q) quiet=${OPTARG};;
        g) gitrepo=${OPTARG};;
        d) dockerrepo=${OPTARG};;
        t) tag=${OPTARG};;
        *) echo "-g Github Repo, -d Docker Repo, -t Tag name"; exit 1;;
    esac
done

if [ -z "$gitrepo" ]; then
  if [ "$quiet" == "1" ]; then
    exit 0
  fi
  echo "Github Repo -g not set. Aborting."
  exit 1
fi

if [ -z "$dockerrepo" ]; then
  if [ "$quiet" == "1" ]; then
    exit 0
  fi
  echo "Docker Repo -d not set. Aborting."
  exit 1
fi

if [ -z "$tag" ]; then
  if [ "$quiet" == "1" ]; then
    exit 0
  fi
  echo "Tag Name -t not set. Aborting."
  exit 1
fi

versionfile="/framelix/system/version.json"
appdata="/framelix/appdata"
tmpdir="/tmp/framelix_appinstall"

echo -n '{"dockerRepo" : "' > $versionfile; echo -n $dockerrepo >> $versionfile; echo -n '", "tag": "' >> $versionfile; echo -n $tag >> $versionfile; echo -n '", "gitRepo" : "' >> $versionfile; echo -n $gitrepo >> $versionfile;  echo -n '"}' >> $versionfile

rm -Rf $tmpdir
git clone -c advice.detachedHead=false -b "$tag" --single-branch --depth 1 "https://github.com/$gitrepo" $tmpdir
cd $tmpdir
git -c advice.detachedHead=false submodule update --init --recursive
rm -Rf .git
cd /

for d in $tmpdir/appdata/modules/*/; do
  if test -f "$d/.git"; then
    rm -Rf "$d/.git"
  fi
  if test -f "$d/package.json"; then
    echo "NPM install production libs in $d"
    cd $d
    npm install --no-audit --omit=dev
    echo "Install done."
  fi
done
rm -Rf $appdata
mv $tmpdir/appdata $appdata
framelix_composer_modules_install